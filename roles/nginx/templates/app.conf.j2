# Choose between www and non-www, listen on the *wrong* one and redirect to
# the right one -- http://wiki.nginx.org/Pitfalls#Server_Name
#
server {
    listen [::]:80;
    listen 80;

    # listen on both hosts
    server_name {{ domain }} www.{{ domain }};

    # and redirect to the https host (declared below)
    # avoiding http://www -> https://www -> https:// chain.
    return 301 https://{{ domain }}$request_uri;
}

server {
    listen [::]:443 ssl http2;
    listen 443 ssl http2;

    # listen on the wrong host
    server_name www.{{ domain }};

    # ssl_certificate           /etc/ssl/{{ domain }}/{{ domain }}.crt;
    # ssl_certificate_key       /etc/ssl/{{ domain }}/{{ domain }}.key;
    ssl_certificate             /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
    ssl_certificate_key         /etc/letsencrypt/live/{{ domain }}/privkey.pem;

    include h5bp/directive-only/ssl.conf;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
    # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
    resolver 8.8.8.8;
    ssl_stapling on;
    ssl_trusted_certificate /etc/ssl/{{ domain }}/{{ domain }}.crt;

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    # and redirect to the non-www host (declared below)
    return 301 https://{{ domain }}$request_uri;
}

server {
    listen [::]:443 ssl http2;
    listen 443 ssl http2;

    root /home/{{ appuser_username }}/{{ app_name }}/current/public;
    index index.html index.htm index.php;

    try_files $uri $uri/ $uri/index.html $uri.html =404;

    server_name {{ domain }};

    charset utf-8;

    # No Trailing Slash
    rewrite ^/(.*)/$ /$1 permanent;

    # Don't require .html Extension
    rewrite ^(/.*)\.html(\?.*)?$ $1$2 permanent;

    access_log /var/log/nginx/{{ domain }}-access.log;
    error_log  /var/log/nginx/{{ domain }}-error.log error;

    # Browser and robot always look for these
    # Turn off logging for them
    location = /favicon.ico { log_not_found off; access_log off; }
    location = /robots.txt  { log_not_found off; access_log off; }

    include h5bp/basic.conf;
    include h5bp/directive-only/extra-security.conf;

    ssl_certificate           /etc/ssl/{{ domain }}/{{ domain }}.crt;
    ssl_certificate_key       /etc/ssl/{{ domain }}/{{ domain }}.key;
    include h5bp/directive-only/ssl.conf;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
    # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
    resolver 8.8.8.8;
    ssl_stapling on;
    ssl_trusted_certificate /etc/ssl/{{ domain }}/{{ domain }}.crt;

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    location / {
        try_files $uri $uri/ /index.php?is_args$args;
    }

    location ~ ^\. {
        deny all;
    }

    location ~ \.php$ {
       include snippets/fastcgi-php.conf;

       # With php5-cgi alone:
       fastcgi_pass 127.0.0.1:9000;
       # With php5-fpm:
       #fastcgi_pass unix:/var/run/php5-fpm.sock;
    }
}
